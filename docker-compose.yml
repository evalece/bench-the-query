version: "3.8"


networks: 
  bench_q:
    external: false 
services:

  redis:
    container_name: redis_bench_query
    build: ./redis # Redis Stack image + Lua script for fake dataloading; #load test works with default fake dataset, See readme.
    ports:
      - "6370:6379" # This field is fixed until later dev changes ; container: 6379
    # tmpfs:
    #   - /data
    #environment:
      # Preservered field for scirpt control feature; this helps future development in 
      # multilevel query/ subquery
      # CLI in defualt dataset benchmark 
    networks:
      - bench_q 

  graphql:
    build: ./generic_graphQL  # Allows user to query with Redis CLI
    tmpfs:
      - /data # client server may cache something, but discard after closing container
    ports:
      - "4000:4000" # container: graphQL port 4000 pred-defined in code 
    depends_on: #dependent images will get built first
      - redis
    #environment:
      # Preservered field for scirpt control feature; this helps future development in 
      # multilevel query/ subquery
    networks:
      - bench_q 


  fast_api:
    build: ./generic_FastAPI/restAPI/fastAPI  # Allows user to query with Redis CLI
    ports:
      - "8000:8000" # container: fastAPI port 8000 pred-defined in code 
    tmpfs:
      - /data # client server may cache something, but discard after closing container
    depends_on: #dependent images will get built first
      - redis
    networks:
      - bench_q 
    #environment:
      # Preservered field for scirpt control feature; this helps future development in 
      # multilevel query/ subquery
      # CLI in defualt dataset benchmark 


  k6_fastAPI:
    image: grafana/k6
    container_name: k6_load_test
    ports:
      - "1100:1100"
    volumes:
      - ./load_test/results:/result
      - ./load_test/scripts:/scripts
    networks:
      - bench_q  # Attach to the shared network
    environment:
      - FastAPI_URL= http://fast_api:8000/ 
      - K6_OUT=influxdb=http://influxdb:8086/k6db
      - TYPE=fastapi
    depends_on:
      - graphql  # Ensure the 'graphql' service is ready before running tests


  
    command:  run  /scripts/fastAPI_test.js 
 #run --summary-export /results/graphQL_test.json  /scripts/graphQL_test.js 
      

  k6_graphql: # one K6 for each API server benchmark; sequentially run
    image: grafana/k6
    depends_on:
      k6_fastapi
    networks:
      - bench_q
    volumes:
      - ./load_test/scripts:/scripts
      - ./load_test/results:/results
    environment:
      - GraphQL_URL= http://graphql:4000/ 
      - K6_OUT=influxdb=http://influxdb:8086/k6db
      - TYPE=graphql
    
    command: >
      sh -c "while [ ! -f /results/fastapi_done.flag ]; do echo 'Waiting for fastapi test...'; sleep 2; done &&
              k6 run --summary-export=/results/graphql.json /scripts/graphQL_test.js"



  influxdb:
    image: influxdb:1.8
    #container_name: influxdb
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb # Presistance prupose;  V6 directly output to influx; to delete, check docker volume ls then docker volume rm xxx
    networks:
      - bench_q
    depends_on:
      - k6
    environment:
      - INFLUXDB_DB=k6db #database name; listenign port: http://influxdb:8086/k6db



  grafana:
    image: grafana/grafana
   #container_name: grafana
    ports:
      - "3000:3000" # post-result dashboard: loacalhost:3000
    networks:
      - bench_q
    depends_on:
      - influxdb # V6 output -> influx DB -> gradana
    environment:
      - GF_SECURITY_ADMIN_USER=admin 
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana





volumes: # For presistance in dashboard and logging
  influxdb_data:
  grafana_data:
  
# Next: 
# 

### If any sub component fails:
# docker-compose up -d failed_instance

#### Gracefulluy shutdown:
# docker-compose down


#### aggregated containers: 
# docker-compose  -d -p bench_query up: starts the containers in background, non-blocking 

# docker-compose -p bench_query up: blocking; shows all logs

#####
# docker-compose build  : create image

# docker-compose up  /   docker-compose up  -p bech_q : build automatically; docker check image upate

# docker-compose up --build     : force reebuild and run
